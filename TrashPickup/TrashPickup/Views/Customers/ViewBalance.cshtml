@model TrashPickup.Models.Customer

@{
    ViewBag.Title = "ViewBalance";
}

<h2>Paying your balance is easy with PayPal!</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <h4>Current Balance Due</h4>
        <h6>If nothing is shown, you do not owe anything at this time!</h6>
        <dd>
            <p id="money">$ @Html.DisplayFor(model => model.MoneyOwed)</p>
        </dd>
        <br><hr />
        <div class="col-md-10">
            @Html.HiddenFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-10">
            @Html.HiddenFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-10">
            @Html.HiddenFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-10">
            @Html.HiddenFor(model => model.StreetAddress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.StreetAddress, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-10">
            @Html.HiddenFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-10">
            @Html.HiddenFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-10">
            @Html.HiddenFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-10">
            @Html.HiddenFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-10">
            @Html.HiddenFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-10">
            @Html.HiddenFor(model => model.MoneyOwed, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MoneyOwed, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-10">
            @Html.HiddenFor(model => model.NextScheduledPickUp, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NextScheduledPickUp, "", new { @class = "text-danger" })
        </div>
        <br />

            
        @*<div class="form-group">
            <div class="col-md-offset-1">
                <p><a class="btn btn-default" href="https://www.sandbox.paypal.com/">Pay with PayPal! &raquo;</a></p>
            </div>
        </div>*@
        <div id="paypal-button-container"></div>
    </div>
}
<div>
    @Html.ActionLink("Back", "Index", "Users")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="https://www.paypalobjects.com/api/checkout.js"></script>

<script>
    paypal.Button.render({

        env: 'sandbox', 

        client: {
            sandbox:    'AUY2n2gKnWK3vjUMjnAlpZ2Uz3gIdLGaZHLQzwBD-i6V0JKC6giw_1kiHZMmuSYtZML9BpMKHwVqd1r-',
            //production: '<insert production client id>'
        },

        commit: true, 

        payment: function (data, actions) {
            return actions.payment.create({
                transactions: [
                    {
                        amount: { total: document.getElementById('money').value, currency: 'USD' }
                    }
                ]
            });
        },

        onAuthorize: function(data, actions) {
            return actions.payment.execute().then(function(payment) {
                document.querySelector('#paypal-button-container').innerText = 'Payment Complete!';
            });
        }

    }, '#paypal-button-container');
</script>

@*//ServerSide*@
@*<script>
    paypal.Button.render({

        env: 'sandbox',

        payment: function() {
            return paypal.request.post('http://localhost:4737/Customers/ViewBalance/15/checkout/api/paypal/payment/create/').then(function (res) {
                return res.payToken;
            });
        },

        onAuthorize: function(data, actions) {
            return paypal.request.post('http://localhost:4737/Customers/ViewBalance/15/checkout/api/paypal/payment/execute/', {
                payToken: data.paymentID,
                payerId: data.payerID
            }).then(function (res) {
                document.querySelector('#paypal-button-container').innerText = 'Payment Complete!';
            });
        }
    }, '#paypal-button-container');
</script>*@

@*document.getElementById('money').value.ToString()*@